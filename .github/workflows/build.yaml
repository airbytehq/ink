name: build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

env:
  TEST_IMAGE: ink

jobs:
  build:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install poetry
        run: pip install poetry

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-ink-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          find . .venv
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Run black
        run: poetry run black .

      - name: Run isort
        run: poetry run isort

      - name: Run flake8
        run: poetry run pflake8

#      - name: Run mypy
#        run: poetry run mypy

      - name: Run pytest
        run: poetry run pytest

      - name: Gather project metadata
        id: metadata
        run: |
          echo ::set-output name=python_version::$(cat .python-version);
          echo ::set-output name=ink_version::$(poetry version -s);

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          push: false
          tags: ${{ env.TEST_IMAGE }}
          build-args: PYTHON_VERSION=${{ steps.metadata.outputs.python_version }}

      - name: Test Docker image
        run: docker run --rm ${{ env.TEST_IMAGE }}

      - name: Check for clean working tree
        run: |
          git diff --exit-code --stat HEAD
